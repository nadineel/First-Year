;
; CS1022 Introduction to Computing II 2019/2020
; 
;
; Pin Control Block registers
PINSEL4		EQU	0xE002C010

; GPIO registers
FIO2DIR1	EQU	0x3FFFC041
FIO2PIN1	EQU	0x3FFFC055

; TIMER0 registers
T0TCR		EQU	0xE0004004
T0TC		EQU	0xE0004008
T0MR0		EQU	0xE0004018
T0MCR		EQU	0xE0004014

;CONSTANTS
MIN_TIME	EQU	5000000
MAX_TIME	EQU	8000000
SECONDS		EQU	3000000

	AREA	RESET, CODE, READONLY
	ENTRY

	LDR R9,=SECONDS
	LDR R10,=MIN_TIME
	LDR R11,=MAX_TIME
	
	LDR R0,=1	;WINNER=TRUE;
	
	; Enable P2.10 for GPIO
	LDR	R4, =PINSEL4	; load address of PINSEL4
	LDR	R5, [R4]	; read current PINSEL4 value
	BIC	R5, #(0x3 << 20); modify bits 20 and 21 to 00
	STR	R5, [R4]	; write new PINSEL4 value

	; Set P2.10 for input
	LDR	R4, =FIO2DIR1	; load address of FIO2DIR1

	NOP			; on "real" hardware, we cannot place
				; an instruction at address 0x00000014
	LDRB	R5, [R4]	; read current FIO2DIR1 value
	BIC	R5, #(0x1 << 2)	; modify bit 2 to 0 for input, leaving other bits unmodified
	STRB	R5, [R4]	; write new FIO2DIR1

repeat
	BL waitBtnDn

	; Reset TIMER0 using Timer Control Register
	;   Set bit 0 of TCR to 0 to stop TIMER
	;   Set bit 1 of TCR to 1 to reset TIMER
	LDR	R5, =T0TCR
	LDR	R6, =0x2
	STRB	R6, [R5]

	; There appears to be a bug in the uVision simulation
	;   of the TIMER peripherals. Setting the RESET bit of
	;   the TCR (above) should reset the TImer Counter (TC)
	;   but does not appear to do so. We can force it back
	;   to zero here.
	LDR	R5, =T0TC
	LDR	R6, =0x0
	STR	R6, [R5]
	
	; Start TIMER0 using the Timer Control Register
	;   Set bit 0 of TCR to enable the timer
	LDR	R4, =T0TCR
	LDR	R5, =0x01
	STRB	R5, [R4]

	BL waitBtnDn

	; Stop TIMER0 using the Timer Control Register
	;   Set bit 0 of TCR to 0 to stop the timer
	LDR	R5, =T0TCR
	LDR	R6, [R5]
	BIC 	R6,#0x1
	STRB	R6, [R5]

	;elapsed time = T0TC 
	LDR R1,=T0TC

;	LDR R0,=1		;winner=true
	LDR R2,[R1]

	CMP R2,R10	;if ( elapsed time < min time 
	BLT lose		;|| 
	
	CMP R2,R11	;elapsed time > max time ) {
	BGT lose			
	B endiff
lose
	LDR R0,=0		;winner = FALSE; } 
endiff	
	CMP R0,#0		;if (! winner ) {

	BNE win	;I WON

 	;Reconfigure P2.10 as a GPIO output ( see blinky example )
	; Set P2.10 for output
	LDR	R5, =FIO2DIR1	; load address of FIO2DIR1
	NOP
	LDRB	R6, [R5]	; read current FIO2DIR1 value
	ORR	R6, #(0x1 << 2)	; modify bit 2 to 1 for output, leaving other bits unmodified
	STRB	R6, [R5]	; write new FIO2DIR1

; read current P2.10 output value
	;   0 or 1 in bit 2 of FIO2PIN1
	LDR	R4, =0x04		;   setup bit mask for P2.10 bit in FIO2PIN1
	LDR	R5, =FIO2PIN1		;
	LDRB	R6, [R5]		;   read FIO2PIN1

	; modify P2.10 output (leaving other pin outputs controlled by
	;   FIO2PIN1 with their original value)
	TST	R6, R4			;   if (LED off)  TST Ry, Rz
	BNE	elsOff			;   {
	ORR	R6, R6, R4		;     set bit 2 (turn LED on)
	B	endIf			;   }
elsOff					;   else {
	BIC	R6, R6, R4		;     clear bit 2 (turn LED on)
endIf					;   }

	; write new FIO2PIN1 value
	STRB	R6, [R5]
	B enddd
win	
	ADD R10,R10,R9;MIN_TIME+3
	ADD R11,R11,R9	;MAX_TIME+3
	

	B repeat
enddd

STOP B STOP	

;wait button subroutine
waitBtnDn 
 	PUSH {R4-R8} 
	LDR R4, =FIO2PIN1

	LDR R5, [R4] 			; currentState = FIO2PIN1

 	
whBtnDn 				; do { 
	MOV R8, R5 			; 	lastState = currentState;
	LDRB R5, [R4] 			; 	currentState = FIO2PIN1 ; 
	TST R5, #0x04 			; } while ( currentState & 0x04 != 0x00 
	BNE whBtnDn  
	TST R8, #0x04 					; || lastState & 0x04 == 0x00 ); 
	BEQ whBtnDn 
	
	POP {R4-R8} 
	BX	LR

	END