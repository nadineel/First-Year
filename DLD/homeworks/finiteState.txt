module FiniteStateMachine (output reg out_z, input in_x, in_y, clk, reset_b);
reg[1:0] state, next_state;

parameter S0 = 2'b00, S1 = 2'b01, S2 = 2'b10, S3 = 2'b11;

//assign out_z = ((state == S2) || (state == S3));//not needed

always@(posedge clk, negedge reset_b)
	if(reset_b==0)state<=S0; else state<=next_state;

always@(state, in_x,in_y)
   begin 
	case(state)
		S0: if(in_x&&!in_y) next_state<=S3;
		    else if(in_x&&in_y) next_state<=S1;
		    else next_state<=S0;
		S1:if(in_x&&!in_y) next_state<=S2;
		    else if(in_x&&in_y) next_state<=S2;
		    else next_state<=S0;
		S2:if(in_x&&!in_y) next_state<=S3;
		    else if(in_x&&in_y) next_state<=S3;
		    else next_state<=S0;
		S3:if(in_x&&!in_y) next_state<=S3;
		    else if(in_x&&in_y) next_state<=S3;
		    else next_state<=S0;
	endcase
	if((state==S2)||(state==S3)) out_z=1'b1; else out_z=1'b0;
   end
endmodule















